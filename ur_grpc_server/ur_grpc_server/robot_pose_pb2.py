# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: robot_pose.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10robot_pose.proto\x12\nrobot_pose\"_\n\x0cGetPoseReply\x12\n\n\x02id\x18\x01 \x01(\t\x12\t\n\x01x\x18\x02 \x01(\x01\x12\t\n\x01y\x18\x03 \x01(\x01\x12\t\n\x01z\x18\x04 \x01(\x01\x12\n\n\x02rx\x18\x05 \x01(\x01\x12\n\n\x02ry\x18\x06 \x01(\x01\x12\n\n\x02rz\x18\x07 \x01(\x01\"\x1c\n\x0eGetPoseRequest\x12\n\n\x02id\x18\x01 \x01(\t2G\n\x04Pose\x12?\n\x07GetPose\x12\x1a.robot_pose.GetPoseRequest\x1a\x18.robot_pose.GetPoseReplyb\x06proto3')



_GETPOSEREPLY = DESCRIPTOR.message_types_by_name['GetPoseReply']
_GETPOSEREQUEST = DESCRIPTOR.message_types_by_name['GetPoseRequest']
GetPoseReply = _reflection.GeneratedProtocolMessageType('GetPoseReply', (_message.Message,), {
  'DESCRIPTOR' : _GETPOSEREPLY,
  '__module__' : 'robot_pose_pb2'
  # @@protoc_insertion_point(class_scope:robot_pose.GetPoseReply)
  })
_sym_db.RegisterMessage(GetPoseReply)

GetPoseRequest = _reflection.GeneratedProtocolMessageType('GetPoseRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETPOSEREQUEST,
  '__module__' : 'robot_pose_pb2'
  # @@protoc_insertion_point(class_scope:robot_pose.GetPoseRequest)
  })
_sym_db.RegisterMessage(GetPoseRequest)

_POSE = DESCRIPTOR.services_by_name['Pose']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _GETPOSEREPLY._serialized_start=32
  _GETPOSEREPLY._serialized_end=127
  _GETPOSEREQUEST._serialized_start=129
  _GETPOSEREQUEST._serialized_end=157
  _POSE._serialized_start=159
  _POSE._serialized_end=230
# @@protoc_insertion_point(module_scope)
